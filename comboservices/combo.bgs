# this is a simple example to show how to read the secondary MAC address
# stored in flash and display it on the LCD of the BLE112 Eval board.

dim addr(6)
dim tmp(16)
dim x
dim celsius
dim offset
dim a
dim b
dim c


event system_boot(major,minor,patch,build,ll_version,protocol,hw)
	#Set device to advertisement mode and allow undirected connections
	call gap_set_mode(gap_general_discoverable,gap_undirected_connectable)
	#Allow pairing
	call sm_set_bondable_mode(1)

	# set the display to command mode
	call hardware_io_port_write(1,$7,$1)
	call hardware_io_port_config_direction(1,$7)
	# Initialize the display
	call hardware_spi_transfer(0,11,"\x30\x30\x30\x39\x14\x56\x6d\x70\x0c\x06\x01")
	# Change display cursor pos
	call hardware_spi_transfer(0,1,"\x80")
	# set the display to data mode
	call hardware_io_port_write(1,$7,$3)
	#Write title to display
	call hardware_spi_transfer(0,16,"Combo           ")

	# Get local BT address and display it on the LCD
	call system_address_get()(addr(0:6))
	
	# convert all the numbers to ascii for display and store it in t
	tmp(0:1) = (addr(5:1)/$10) + 48 + ((addr(5:1)/$10)/10*7)
	tmp(1:1) = (addr(5:1)&$f) + 48 + ((addr(5:1)&$f )/10*7) 
	tmp(2:1) = (addr(4:1)/$10) + 48 + ((addr(4:1)/$10)/10*7) 
	tmp(3:1) = (addr(4:1)&$f) + 48 + ((addr(4:1)&$f )/10*7) 
	tmp(4:1) = (addr(3:1)/$10) + 48 + ((addr(3:1)/$10)/10*7) 
	tmp(5:1) = (addr(3:1)&$f) + 48 + ((addr(3:1)&$f )/10*7) 
	tmp(6:1) = (addr(2:1)/$10) + 48 + ((addr(2:1)/$10)/10*7) 
	tmp(7:1) = (addr(2:1)&$f) + 48 + ((addr(2:1)&$f )/10*7) 
	tmp(8:1) = (addr(1:1)/$10) + 48 + ((addr(1:1)/$10)/10*7) 
	tmp(9:1) = (addr(1:1)&$f) + 48 + ((addr(1:1)&$f )/10*7) 
	tmp(10:1) = (addr(0:1)/$10)+ 48 + ((addr(0:1)/$10)/10*7) 
	tmp(11:1) = (addr(0:1)&$f) + 48 + ((addr(0:1)&$f )/10*7)
	
	#set the display to command mode
	call hardware_io_port_write(1,$7,$1)
	# Change display cursor pos
	call hardware_spi_transfer(0,1,"\xc0")
	#set the display to data mode
	call hardware_io_port_write(1,$7,$3)
	# write out the string in t to the display
	call hardware_spi_transfer(0,12,tmp(0:12))

	# setup port 2 pin 1 for the switch output
	call hardware_io_port_config_direction(2,$2)
	# turn port pin off
	call hardware_io_port_write(2,$2,$0)

	#set timer to periodically create an interrupt with interval of 1s
	call hardware_set_soft_timer(32768,0,0)
end

#timer expired
event hardware_soft_timer(handle)
	#Request for ADC reading
	call hardware_adc_read(14,3,0)
end

event attributes_value(connection, reason, handle, offset, value_len, value)
	if handle = xgatt_switch_state
		# the switch (LED) is on port 2 pin 2 which we toggle on or off
		if value(0) > 0
			call hardware_io_port_write(2,$2,$2)
		else
			call hardware_io_port_write(2,$2,$0)
		end if
	end if
	
	if handle = xgatt_text_string
		x = 0
		while x < 16
			if value_len > x
				tmp(x:1) = value(offset+x:1)
			else
				tmp(x:1) = $20 #space character
			end if
			x = x + 1
		end while
		
		#set the display to command mode
		call hardware_io_port_write(1,$7,$1)
		# Change display cursor pos
		call hardware_spi_transfer(0,1,"\xc0")
		#set the display to data mode
		call hardware_io_port_write(1,$7,$3)
		#Write text to display
		call hardware_spi_transfer(0,16,tmp(0:16))
	end if
end

#ADC measurement ready
event hardware_adc_result(input,value)
	offset=-1500

	# ADC value is 12 MSB
	celsius = value / 16
	# Calculate temperature
	# ADC*V_ref/ADC_max / T_coeff + offset
	celsius = (10*celsius*1150/2047) * 10/45 + offset

	#set flags
	tmp(0:1)=0
	
	#set as float
	tmp(1:4)=float(celsius, -1)
	
	#write the temperature information to the GATT database
	call attributes_write(xgatt_temperature_celsius,0,5,tmp(0:5))
	
	#Extracting desimals from integer
	a = (celsius / 100)						#2X.X
	b = (celsius / 10) + (a*-10)			#X4.X
	c = (celsius)      + (a*-100) + (b*-10)	#XX.8
	
	#+48 is for desimal -> ascii
	tmp(0:1) = a + 48 #"2"
	tmp(1:1) = b + 48 #"4"
	tmp(2:1) = 46	    #"."
	tmp(3:1) = c + 48 #"8"
	tmp(4:1) = $df    #"deg"
	tmp(5:1) = 67	    #"C"
	
	#set the display to command mode
	call hardware_io_port_write(1,$7,$1)
	# Change display cursor pos
	call hardware_spi_transfer(0,1,"\x8a")
	#set the display to data mode
	call hardware_io_port_write(1,$7,$3)
	#Write temperature to display
	call hardware_spi_transfer(0,6,tmp(0:6))
	
	#set the advertising data
	call gap_set_adv_data(0, 6, tmp(0:6))
end

event connection_status(connection, flags, address, address_type, conn_interval, timeout, latency, bonding)
	#set the display to command mode
	call hardware_io_port_write(1,$7,$1)
	# Change display cursor pos
	call hardware_spi_transfer(0,1,"\x87")
	#set the display to data mode
	call hardware_io_port_write(1,$7,$3)
	#Write temperature to display
	call hardware_spi_transfer(0,1,"C")
end

event connection_disconnected(handle,result)
	#set the display to command mode
	call hardware_io_port_write(1,$7,$1)
	# Change display cursor pos
	call hardware_spi_transfer(0,1,"\x87")
	#set the display to data mode
	call hardware_io_port_write(1,$7,$3)
	#Write temperature to display
	call hardware_spi_transfer(0,1,"D")

	#in case if disconnect, return to advertisement mode
    call gap_set_mode(gap_general_discoverable,gap_undirected_connectable)
end

